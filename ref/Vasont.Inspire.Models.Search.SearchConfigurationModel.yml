### YamlMime:ManagedReference
items:
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel
  commentId: T:Vasont.Inspire.Models.Search.SearchConfigurationModel
  id: SearchConfigurationModel
  parent: Vasont.Inspire.Models.Search
  children:
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor(System.String,System.String,Vasont.Inspire.Models.Search.SearchConfigurationDataType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String})
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
  - Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
  langs:
  - csharp
  - vb
  name: SearchConfigurationModel
  nameWithType: SearchConfigurationModel
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel
  type: Class
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: SearchConfigurationModel
    path: Search/SearchConfigurationModel.cs
    startLine: 14
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nThis class represents a search configuration model.\n"
  example: []
  syntax:
    content: public class SearchConfigurationModel
    content.vb: Public Class SearchConfigurationModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor
  commentId: M:Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor
  id: '#ctor'
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: SearchConfigurationModel()
  nameWithType: SearchConfigurationModel.SearchConfigurationModel()
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.SearchConfigurationModel()
  type: Constructor
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: .ctor
    path: Search/SearchConfigurationModel.cs
    startLine: 21
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nInitializes a new instance of the <xref href=\"Vasont.Inspire.Models.Search.SearchConfigurationModel\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SearchConfigurationModel()
    content.vb: Public Sub New
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor(System.String,System.String,Vasont.Inspire.Models.Search.SearchConfigurationDataType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String})
  commentId: M:Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor(System.String,System.String,Vasont.Inspire.Models.Search.SearchConfigurationDataType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String})
  id: '#ctor(System.String,System.String,Vasont.Inspire.Models.Search.SearchConfigurationDataType,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Boolean,System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String})'
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: SearchConfigurationModel(String, String, SearchConfigurationDataType, List<KeyValuePair<String, String>>, Boolean, Dictionary<SearchExpressionOperator, String>)
  nameWithType: SearchConfigurationModel.SearchConfigurationModel(String, String, SearchConfigurationDataType, List<KeyValuePair<String, String>>, Boolean, Dictionary<SearchExpressionOperator, String>)
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.SearchConfigurationModel(System.String, System.String, Vasont.Inspire.Models.Search.SearchConfigurationDataType, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.String>>, System.Boolean, System.Collections.Generic.Dictionary<Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: .ctor
    path: Search/SearchConfigurationModel.cs
    startLine: 37
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nInitializes a new instance of the <xref href=\"Vasont.Inspire.Models.Search.SearchConfigurationModel\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SearchConfigurationModel(string fieldId, string displayName, SearchConfigurationDataType type = SearchConfigurationDataType.String, List<KeyValuePair<string, string>> validValues = null, bool compareExists = false, Dictionary<SearchExpressionOperator, string> overrideOperators = null)
    parameters:
    - id: fieldId
      type: System.String
      description: Contains the field identity used for filtering.
    - id: displayName
      type: System.String
      description: Contains the user interface field display name.
    - id: type
      type: Vasont.Inspire.Models.Search.SearchConfigurationDataType
      description: Contains the data type of the field.
    - id: validValues
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: Contains an optional list of valid values for the field.
    - id: compareExists
      type: System.Boolean
      description: Contains a value indicating whether this is an existence comparison (not null).
    - id: overrideOperators
      type: System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}
      description: Contains an optional list of valid operators for the field.
    content.vb: Public Sub New(fieldId As String, displayName As String, type As SearchConfigurationDataType = SearchConfigurationDataType.String, validValues As List(Of KeyValuePair(Of String, String)) = Nothing, compareExists As Boolean = False, overrideOperators As Dictionary(Of SearchExpressionOperator, String) = Nothing)
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor*
  nameWithType.vb: SearchConfigurationModel.SearchConfigurationModel(String, String, SearchConfigurationDataType, List(Of KeyValuePair(Of String, String)), Boolean, Dictionary(Of SearchExpressionOperator, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Vasont.Inspire.Models.Search.SearchConfigurationModel.SearchConfigurationModel(System.String, System.String, Vasont.Inspire.Models.Search.SearchConfigurationDataType, System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)), System.Boolean, System.Collections.Generic.Dictionary(Of Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String))
  name.vb: SearchConfigurationModel(String, String, SearchConfigurationDataType, List(Of KeyValuePair(Of String, String)), Boolean, Dictionary(Of SearchExpressionOperator, String))
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
  id: FieldId
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: FieldId
  nameWithType: SearchConfigurationModel.FieldId
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: FieldId
    path: Search/SearchConfigurationModel.cs
    startLine: 54
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the field identity.\n"
  example: []
  syntax:
    content: public string FieldId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FieldId As String
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
  id: DisplayName
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: SearchConfigurationModel.DisplayName
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: DisplayName
    path: Search/SearchConfigurationModel.cs
    startLine: 59
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the user interface display name.\n"
  example: []
  syntax:
    content: public string DisplayName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DisplayName As String
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
  id: CompareExists
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: CompareExists
  nameWithType: SearchConfigurationModel.CompareExists
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: CompareExists
    path: Search/SearchConfigurationModel.cs
    startLine: 64
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets a value indicating whether this is an existence comparison (not null).\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public bool CompareExists { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonIgnore>

      Public Property CompareExists As Boolean
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
  id: DataType
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: SearchConfigurationModel.DataType
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: DataType
    path: Search/SearchConfigurationModel.cs
    startLine: 70
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the data type.\n"
  example: []
  syntax:
    content: public SearchConfigurationDataType DataType { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Search.SearchConfigurationDataType
    content.vb: Public Property DataType As SearchConfigurationDataType
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
  id: Operators
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: Operators
  nameWithType: SearchConfigurationModel.Operators
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Operators
    path: Search/SearchConfigurationModel.cs
    startLine: 75
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets a list of operator key value pairs.\n"
  example: []
  syntax:
    content: public List<KeyValuePair<SearchExpressionOperator, string>> Operators { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}}
    content.vb: Public Property Operators As List(Of KeyValuePair(Of SearchExpressionOperator, String))
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
  commentId: P:Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
  id: ValidValues
  parent: Vasont.Inspire.Models.Search.SearchConfigurationModel
  langs:
  - csharp
  - vb
  name: ValidValues
  nameWithType: SearchConfigurationModel.ValidValues
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
  type: Property
  source:
    remote:
      path: src/Search/SearchConfigurationModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ValidValues
    path: Search/SearchConfigurationModel.cs
    startLine: 80
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets a list of valid value key value pairs.\n"
  example: []
  syntax:
    content: public List<KeyValuePair<string, string>> ValidValues { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    content.vb: Public Property ValidValues As List(Of KeyValuePair(Of String, String))
  overload: Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Vasont.Inspire.Models.Search
  commentId: N:Vasont.Inspire.Models.Search
  name: Vasont.Inspire.Models.Search
  nameWithType: Vasont.Inspire.Models.Search
  fullName: Vasont.Inspire.Models.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel
  commentId: T:Vasont.Inspire.Models.Search.SearchConfigurationModel
  name: SearchConfigurationModel
  nameWithType: SearchConfigurationModel
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.#ctor
  name: SearchConfigurationModel
  nameWithType: SearchConfigurationModel.SearchConfigurationModel
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.SearchConfigurationModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vasont.Inspire.Models.Search.SearchConfigurationDataType
  commentId: T:Vasont.Inspire.Models.Search.SearchConfigurationDataType
  parent: Vasont.Inspire.Models.Search
  name: SearchConfigurationDataType
  nameWithType: SearchConfigurationDataType
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationDataType
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<String, String>>
  nameWithType: List<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: List(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: List(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}
  commentId: T:System.Collections.Generic.Dictionary{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<SearchExpressionOperator, String>
  nameWithType: Dictionary<SearchExpressionOperator, String>
  fullName: System.Collections.Generic.Dictionary<Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String>
  nameWithType.vb: Dictionary(Of SearchExpressionOperator, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String)
  name.vb: Dictionary(Of SearchExpressionOperator, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vasont.Inspire.Models.Search.SearchExpressionOperator
    name: SearchExpressionOperator
    nameWithType: SearchExpressionOperator
    fullName: Vasont.Inspire.Models.Search.SearchExpressionOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vasont.Inspire.Models.Search.SearchExpressionOperator
    name: SearchExpressionOperator
    nameWithType: SearchExpressionOperator
    fullName: Vasont.Inspire.Models.Search.SearchExpressionOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
  name: FieldId
  nameWithType: SearchConfigurationModel.FieldId
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.FieldId
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
  name: DisplayName
  nameWithType: SearchConfigurationModel.DisplayName
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.DisplayName
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
  name: CompareExists
  nameWithType: SearchConfigurationModel.CompareExists
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.CompareExists
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
  name: DataType
  nameWithType: SearchConfigurationModel.DataType
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.DataType
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
  name: Operators
  nameWithType: SearchConfigurationModel.Operators
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.Operators
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Vasont.Inspire.Models.Search.SearchExpressionOperator,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<SearchExpressionOperator, String>>
  nameWithType: List<KeyValuePair<SearchExpressionOperator, String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String>>
  nameWithType.vb: List(Of KeyValuePair(Of SearchExpressionOperator, String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of Vasont.Inspire.Models.Search.SearchExpressionOperator, System.String))
  name.vb: List(Of KeyValuePair(Of SearchExpressionOperator, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vasont.Inspire.Models.Search.SearchExpressionOperator
    name: SearchExpressionOperator
    nameWithType: SearchExpressionOperator
    fullName: Vasont.Inspire.Models.Search.SearchExpressionOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vasont.Inspire.Models.Search.SearchExpressionOperator
    name: SearchExpressionOperator
    nameWithType: SearchExpressionOperator
    fullName: Vasont.Inspire.Models.Search.SearchExpressionOperator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues*
  commentId: Overload:Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
  name: ValidValues
  nameWithType: SearchConfigurationModel.ValidValues
  fullName: Vasont.Inspire.Models.Search.SearchConfigurationModel.ValidValues
