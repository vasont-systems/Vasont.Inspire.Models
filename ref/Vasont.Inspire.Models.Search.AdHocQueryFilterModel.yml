### YamlMime:ManagedReference
items:
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  commentId: T:Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  id: AdHocQueryFilterModel
  parent: Vasont.Inspire.Models.Search
  children:
  - Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
  - Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
  - Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
  - Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
  - Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
  langs:
  - csharp
  - vb
  name: AdHocQueryFilterModel
  nameWithType: AdHocQueryFilterModel
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  type: Class
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: AdHocQueryFilterModel
    path: Search/AdHocQueryFilterModel.cs
    startLine: 12
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nThis class is represents an ad-hoc filter query row sent from a query interface within the application.\n"
  example: []
  syntax:
    content: public class AdHocQueryFilterModel
    content.vb: Public Class AdHocQueryFilterModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
  commentId: P:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
  id: Logic
  parent: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  langs:
  - csharp
  - vb
  name: Logic
  nameWithType: AdHocQueryFilterModel.Logic
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
  type: Property
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Logic
    path: Search/AdHocQueryFilterModel.cs
    startLine: 17
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the filter row logic operator\n"
  example: []
  syntax:
    content: public SearchLogicOperator Logic { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Search.SearchLogicOperator
    content.vb: Public Property Logic As SearchLogicOperator
  overload: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
  commentId: P:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
  id: FilterId
  parent: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  langs:
  - csharp
  - vb
  name: FilterId
  nameWithType: AdHocQueryFilterModel.FilterId
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
  type: Property
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: FilterId
    path: Search/AdHocQueryFilterModel.cs
    startLine: 22
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the filter name to add to the query expression.\n"
  example: []
  syntax:
    content: public string FilterId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FilterId As String
  overload: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
  commentId: P:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
  id: Operator
  parent: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: AdHocQueryFilterModel.Operator
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
  type: Property
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Operator
    path: Search/AdHocQueryFilterModel.cs
    startLine: 27
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the filter operator\n"
  example: []
  syntax:
    content: public SearchExpressionOperator Operator { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Search.SearchExpressionOperator
    content.vb: Public Property Operator As SearchExpressionOperator
  overload: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
  commentId: P:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
  id: Value
  parent: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: AdHocQueryFilterModel.Value
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
  type: Property
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Value
    path: Search/AdHocQueryFilterModel.cs
    startLine: 32
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets the query filter value used to compare.\n"
  example: []
  syntax:
    content: public string Value { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Value As String
  overload: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
  commentId: P:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
  id: GroupedFilters
  parent: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  langs:
  - csharp
  - vb
  name: GroupedFilters
  nameWithType: AdHocQueryFilterModel.GroupedFilters
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
  type: Property
  source:
    remote:
      path: src/Search/AdHocQueryFilterModel.cs
      branch: feature/46061---script-update-to-rename-tables
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: GroupedFilters
    path: Search/AdHocQueryFilterModel.cs
    startLine: 37
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Search
  summary: "\nGets or sets a list of grouped filters for the given filter model.\n"
  example: []
  syntax:
    content: public List<AdHocQueryFilterModel> GroupedFilters { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Vasont.Inspire.Models.Search.AdHocQueryFilterModel}
    content.vb: Public Property GroupedFilters As List(Of AdHocQueryFilterModel)
  overload: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Vasont.Inspire.Models.Search
  commentId: N:Vasont.Inspire.Models.Search
  name: Vasont.Inspire.Models.Search
  nameWithType: Vasont.Inspire.Models.Search
  fullName: Vasont.Inspire.Models.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic*
  commentId: Overload:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
  name: Logic
  nameWithType: AdHocQueryFilterModel.Logic
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Logic
- uid: Vasont.Inspire.Models.Search.SearchLogicOperator
  commentId: T:Vasont.Inspire.Models.Search.SearchLogicOperator
  parent: Vasont.Inspire.Models.Search
  name: SearchLogicOperator
  nameWithType: SearchLogicOperator
  fullName: Vasont.Inspire.Models.Search.SearchLogicOperator
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId*
  commentId: Overload:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
  name: FilterId
  nameWithType: AdHocQueryFilterModel.FilterId
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.FilterId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator*
  commentId: Overload:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
  name: Operator
  nameWithType: AdHocQueryFilterModel.Operator
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Operator
- uid: Vasont.Inspire.Models.Search.SearchExpressionOperator
  commentId: T:Vasont.Inspire.Models.Search.SearchExpressionOperator
  parent: Vasont.Inspire.Models.Search
  name: SearchExpressionOperator
  nameWithType: SearchExpressionOperator
  fullName: Vasont.Inspire.Models.Search.SearchExpressionOperator
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value*
  commentId: Overload:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
  name: Value
  nameWithType: AdHocQueryFilterModel.Value
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.Value
- uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters*
  commentId: Overload:Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
  name: GroupedFilters
  nameWithType: AdHocQueryFilterModel.GroupedFilters
  fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel.GroupedFilters
- uid: System.Collections.Generic.List{Vasont.Inspire.Models.Search.AdHocQueryFilterModel}
  commentId: T:System.Collections.Generic.List{Vasont.Inspire.Models.Search.AdHocQueryFilterModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AdHocQueryFilterModel>
  nameWithType: List<AdHocQueryFilterModel>
  fullName: System.Collections.Generic.List<Vasont.Inspire.Models.Search.AdHocQueryFilterModel>
  nameWithType.vb: List(Of AdHocQueryFilterModel)
  fullName.vb: System.Collections.Generic.List(Of Vasont.Inspire.Models.Search.AdHocQueryFilterModel)
  name.vb: List(Of AdHocQueryFilterModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
    name: AdHocQueryFilterModel
    nameWithType: AdHocQueryFilterModel
    fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
    name: AdHocQueryFilterModel
    nameWithType: AdHocQueryFilterModel
    fullName: Vasont.Inspire.Models.Search.AdHocQueryFilterModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
