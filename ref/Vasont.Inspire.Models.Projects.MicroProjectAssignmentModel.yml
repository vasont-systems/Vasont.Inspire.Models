### YamlMime:ManagedReference
items:
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  commentId: T:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  id: MicroProjectAssignmentModel
  parent: Vasont.Inspire.Models.Projects
  children:
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
  - Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
  langs:
  - csharp
  - vb
  name: MicroProjectAssignmentModel
  nameWithType: MicroProjectAssignmentModel
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  type: Class
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: MicroProjectAssignmentModel
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 15
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nThis class contains the absolute minimum values for a project assignment for user interface usage.\n"
  example: []
  syntax:
    content: public class MicroProjectAssignmentModel
    content.vb: Public Class MicroProjectAssignmentModel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
  id: ProjectAssignmentId
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: ProjectAssignmentId
  nameWithType: MicroProjectAssignmentModel.ProjectAssignmentId
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ProjectAssignmentId
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 20
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the project assignment identity value.\n"
  example: []
  syntax:
    content: public long ProjectAssignmentId { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property ProjectAssignmentId As Long
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
  id: ProjectId
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: ProjectId
  nameWithType: MicroProjectAssignmentModel.ProjectId
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ProjectId
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 25
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the associated project identity value.\n"
  example: []
  syntax:
    content: public long ProjectId { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property ProjectId As Long
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
  id: ProjectTitle
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: ProjectTitle
  nameWithType: MicroProjectAssignmentModel.ProjectTitle
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ProjectTitle
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 30
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the associated project title value.\n"
  example: []
  syntax:
    content: public string ProjectTitle { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ProjectTitle As String
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
  id: State
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: State
  nameWithType: MicroProjectAssignmentModel.State
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: State
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 35
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the assignment state name.\n"
  example: []
  syntax:
    content: public MicroProjectAssignmentStateModel State { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Projects.MicroProjectAssignmentStateModel
    content.vb: Public Property State As MicroProjectAssignmentStateModel
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
  id: AssignedUser
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: AssignedUser
  nameWithType: MicroProjectAssignmentModel.AssignedUser
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: AssignedUser
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 40
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the model of the assigned user.\n"
  example: []
  syntax:
    content: public MicroUserModel AssignedUser { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Security.MicroUserModel
    content.vb: Public Property AssignedUser As MicroUserModel
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
  id: DueDate
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: DueDate
  nameWithType: MicroProjectAssignmentModel.DueDate
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: DueDate
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 45
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the assignment due date.\n"
  example: []
  syntax:
    content: public DateTime? DueDate { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Property DueDate As Date?
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
  id: CreatedDate
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: CreatedDate
  nameWithType: MicroProjectAssignmentModel.CreatedDate
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: CreatedDate
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 50
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the assignment created date.\n"
  example: []
  syntax:
    content: public DateTime? CreatedDate { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Property CreatedDate As Date?
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
  id: Description
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: MicroProjectAssignmentModel.Description
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Description
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 55
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the project assignment description.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
  id: RequiresInput
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: RequiresInput
  nameWithType: MicroProjectAssignmentModel.RequiresInput
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: RequiresInput
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 60
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets a value indicating whether the assignment has active workflow.\n"
  example: []
  syntax:
    content: public bool RequiresInput { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property RequiresInput As Boolean
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
  id: WorkflowName
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: WorkflowName
  nameWithType: MicroProjectAssignmentModel.WorkflowName
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: WorkflowName
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 65
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the optional workflow name.\n"
  example: []
  syntax:
    content: public string WorkflowName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property WorkflowName As String
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  id: ProjectWorkflowSubmittal
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: ProjectWorkflowSubmittal
  nameWithType: MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ProjectWorkflowSubmittal
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 70
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the project workflow submittal model.\n"
  example: []
  syntax:
    content: public ProjectWorkflowSubmittalModel ProjectWorkflowSubmittal { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Projects.ProjectWorkflowSubmittalModel
    content.vb: Public Property ProjectWorkflowSubmittal As ProjectWorkflowSubmittalModel
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
  id: ProjectActivity
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: ProjectActivity
  nameWithType: MicroProjectAssignmentModel.ProjectActivity
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: ProjectActivity
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 75
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets the project activity information.\n"
  example: []
  syntax:
    content: public MinimalProjectActivityModel ProjectActivity { get; set; }
    parameters: []
    return:
      type: Vasont.Inspire.Models.Projects.MinimalProjectActivityModel
    content.vb: Public Property ProjectActivity As MinimalProjectActivityModel
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
  commentId: P:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
  id: Components
  parent: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel
  langs:
  - csharp
  - vb
  name: Components
  nameWithType: MicroProjectAssignmentModel.Components
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
  type: Property
  source:
    remote:
      path: src/Projects/MicroProjectAssignmentModel.cs
      branch: develop
      repo: https://github.com/vasont-systems/Vasont.Inspire.Models.git
    id: Components
    path: Projects/MicroProjectAssignmentModel.cs
    startLine: 80
  assemblies:
  - Vasont.Inspire.Models
  namespace: Vasont.Inspire.Models.Projects
  summary: "\nGets or sets a list of components associated with the assignment.\n"
  example: []
  syntax:
    content: public List<MicroComponentModel> Components { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Vasont.Inspire.Models.Components.MicroComponentModel}
    content.vb: Public Property Components As List(Of MicroComponentModel)
  overload: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Vasont.Inspire.Models.Projects
  commentId: N:Vasont.Inspire.Models.Projects
  name: Vasont.Inspire.Models.Projects
  nameWithType: Vasont.Inspire.Models.Projects
  fullName: Vasont.Inspire.Models.Projects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
  name: ProjectAssignmentId
  nameWithType: MicroProjectAssignmentModel.ProjectAssignmentId
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectAssignmentId
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
  name: ProjectId
  nameWithType: MicroProjectAssignmentModel.ProjectId
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectId
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
  name: ProjectTitle
  nameWithType: MicroProjectAssignmentModel.ProjectTitle
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectTitle
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
  name: State
  nameWithType: MicroProjectAssignmentModel.State
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.State
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentStateModel
  commentId: T:Vasont.Inspire.Models.Projects.MicroProjectAssignmentStateModel
  parent: Vasont.Inspire.Models.Projects
  name: MicroProjectAssignmentStateModel
  nameWithType: MicroProjectAssignmentStateModel
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentStateModel
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
  name: AssignedUser
  nameWithType: MicroProjectAssignmentModel.AssignedUser
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.AssignedUser
- uid: Vasont.Inspire.Models.Security.MicroUserModel
  commentId: T:Vasont.Inspire.Models.Security.MicroUserModel
  parent: Vasont.Inspire.Models.Security
  name: MicroUserModel
  nameWithType: MicroUserModel
  fullName: Vasont.Inspire.Models.Security.MicroUserModel
- uid: Vasont.Inspire.Models.Security
  commentId: N:Vasont.Inspire.Models.Security
  name: Vasont.Inspire.Models.Security
  nameWithType: Vasont.Inspire.Models.Security
  fullName: Vasont.Inspire.Models.Security
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
  name: DueDate
  nameWithType: MicroProjectAssignmentModel.DueDate
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.DueDate
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
  name: CreatedDate
  nameWithType: MicroProjectAssignmentModel.CreatedDate
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.CreatedDate
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
  name: Description
  nameWithType: MicroProjectAssignmentModel.Description
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Description
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
  name: RequiresInput
  nameWithType: MicroProjectAssignmentModel.RequiresInput
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.RequiresInput
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
  name: WorkflowName
  nameWithType: MicroProjectAssignmentModel.WorkflowName
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.WorkflowName
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  name: ProjectWorkflowSubmittal
  nameWithType: MicroProjectAssignmentModel.ProjectWorkflowSubmittal
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectWorkflowSubmittal
- uid: Vasont.Inspire.Models.Projects.ProjectWorkflowSubmittalModel
  commentId: T:Vasont.Inspire.Models.Projects.ProjectWorkflowSubmittalModel
  parent: Vasont.Inspire.Models.Projects
  name: ProjectWorkflowSubmittalModel
  nameWithType: ProjectWorkflowSubmittalModel
  fullName: Vasont.Inspire.Models.Projects.ProjectWorkflowSubmittalModel
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
  name: ProjectActivity
  nameWithType: MicroProjectAssignmentModel.ProjectActivity
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.ProjectActivity
- uid: Vasont.Inspire.Models.Projects.MinimalProjectActivityModel
  commentId: T:Vasont.Inspire.Models.Projects.MinimalProjectActivityModel
  parent: Vasont.Inspire.Models.Projects
  name: MinimalProjectActivityModel
  nameWithType: MinimalProjectActivityModel
  fullName: Vasont.Inspire.Models.Projects.MinimalProjectActivityModel
- uid: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components*
  commentId: Overload:Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
  name: Components
  nameWithType: MicroProjectAssignmentModel.Components
  fullName: Vasont.Inspire.Models.Projects.MicroProjectAssignmentModel.Components
- uid: System.Collections.Generic.List{Vasont.Inspire.Models.Components.MicroComponentModel}
  commentId: T:System.Collections.Generic.List{Vasont.Inspire.Models.Components.MicroComponentModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MicroComponentModel>
  nameWithType: List<MicroComponentModel>
  fullName: System.Collections.Generic.List<Vasont.Inspire.Models.Components.MicroComponentModel>
  nameWithType.vb: List(Of MicroComponentModel)
  fullName.vb: System.Collections.Generic.List(Of Vasont.Inspire.Models.Components.MicroComponentModel)
  name.vb: List(Of MicroComponentModel)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Vasont.Inspire.Models.Components.MicroComponentModel
    name: MicroComponentModel
    nameWithType: MicroComponentModel
    fullName: Vasont.Inspire.Models.Components.MicroComponentModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Vasont.Inspire.Models.Components.MicroComponentModel
    name: MicroComponentModel
    nameWithType: MicroComponentModel
    fullName: Vasont.Inspire.Models.Components.MicroComponentModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
